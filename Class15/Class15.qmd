---
title: "Bayesian Regression Models Using Stan (brms)"
author: "Ben Goodrich"
format: revealjs
editor: visual
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

## Advanced GDP Estimate

```{=html}
<script type="text/x-mathjax-config">
MathJax.Hub.Register.StartupHook("TeX Jax Ready",function () {
  MathJax.Hub.Insert(MathJax.InputJax.TeX.Definitions.macros,{
    cancel: ["Extension","cancel"],
    bcancel: ["Extension","cancel"],
    xcancel: ["Extension","cancel"],
    cancelto: ["Extension","cancel"]
  });
});
</script>
```
-   [BEA](https://www.bea.gov/news/2025/gross-domestic-product-2nd-quarter-2025-advance-estimate): "Real gross domestic product (GDP) increased at an annual rate of 3.0 percent in the second quarter of 2025 (April, May, and June), according to the advance estimate released by the U.S. Bureau of Economic Analysis."
-   [NYT](https://www.nytimes.com/2025/07/30/business/us-economy-grew-in-second-quarter-as-tariffs-scrambled-data.html?unlocked_article_code=1.aU8.GKBI.8qyNvyPWHeBq&smid=url-share): "Gross domestic product, adjusted for inflation, increased at a 3 percent annual rate in the second quarter, the Commerce Department said on Wednesday. That topped forecasters' expectations and appeared to represent a strong rebound from the first three months of the year, when output contracted at a 0.5 percent rate."
-   The NYT does not acknowledge that 3% is not "the truth"

## Logit Model, No Intercept, 1 Predictor

```{r}
#| echo: false
log_prior <- function(beta_proposal, location = 0, scale = 1 / sqrt(2)) {
  return(-log(2 * scale) - abs( (beta_proposal - location) / scale ))
}
log_sum_exp <- function(a,b) {
  m <- pmax(a,b)
  return( ifelse(a > b, m + log1p(exp(b - m)), 
                        m + log1p(exp(a - m))) )
}
ll <- function(beta_proposal, x, y) {
  stopifnot(is.numeric(beta_proposal), is.numeric(x), is.numeric(y))
  neg_x_beta_proposal <- -outer(x, beta_proposal)
  denominator <- log_sum_exp(0, neg_x_beta_proposal)
  return(colSums(neg_x_beta_proposal[y == 0, , drop = FALSE]) - 
         colSums(denominator))
}
set.seed(12345)
N <- 9
y <- c(rep(1:0, times = 4), 1)
x <- rnorm(N)
LIM <- c(-4, 10)
curve(exp(log_prior(beta)), from = LIM[1], to = LIM[2], xname = "beta", ylab = "On log-scale",
      xlab = expression(beta), log = "y", ylim = c(1e-8, 0.6), n = 1001, las = 1)
curve(exp(ll(beta, x, y)), from = LIM[1], to = LIM[2], xname = "beta", 
      add = TRUE, col = "red", lty = "dashed", log = "y", n = 1001)
kernel <- function(beta, x, y) {
  exp(ll(beta, x, y) + log_prior(beta))
}
denom <- integrate(kernel, x = x, y = y, lower = -Inf, upper = Inf)$value
curve(kernel(beta, x, y) / denom, from = LIM[1], to = LIM[2], xname = "beta", 
      add = TRUE, col = "blue", lty = "dotted", log = "y", n = 1001)
legend("topright", legend = c("Laplace prior", "likelihood", "posterior"), 
       col = c(1,2,4), lty = 1:3, box.lwd = NA)
```

## Whither [Data Science](https://datascience.columbia.edu/event/data-science-day-2024/?utm_source=newsletter&utm_medium=email&utm_campaign=Highlights+032724)?

::: columns
::: {.column width="50%"}
[Conway's](http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram) Venn Diagram

[![](https://images.squarespace-cdn.com/content/v1/5150aec6e4b0e340ec52710a/1364352051365-HZAS3CLBF7ABLE3F5OBY/Data_Science_VD.png)](http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram)
:::

::: {.column width="50%"}
::: fragment
What happens if you intersect

::: incremental
-   [Probability]{style="color: green"}
-   [Priors and Model Building]{style="color: blue"}
-   [Markov Chain Monte Carlo]{style="color: red"}?
-   Since at least $1990$, Bayesian estimation has been what data science purported to be but isn't
-   "Data science" came along later but largely ignored it
:::
:::
:::
:::

## [Sanderson](https://www.3blue1brown.com/lessons/bayes-theorem): Scope of Bayes' Rule

![](https://3b1b-posts.us-east-1.linodeobjects.com/content/lessons/2019/bayes-theorem/when-to-use.png){fig-align="center" width="1024" height="393"}

> What's noteworthy is that such a straightforward fact about proportions can become hugely significant for science, AI, and any situation where you want to quantify belief.

## Arguments to `brm`

```{r}
library(brms)
args(brm)
```

## The `formula` Argument to `brm`

-   Everything to the right of the `~` is the same in R
-   The thing to the left of the `~` is often just the outcome
-   However, `brm` introduces a new possibility for this syntax like `y | fun(variable)`, where `fun` could be
    -   `cens()` and `trunc()` to specify known censoring or truncation bounds
    -   `weights()` and `disp()`, which should not be used
    -   `se()` to specify "known" standard errors
    -   `trials()`, which is used in binomial models only
    -   `cat()` to specify the possible categories

## The `family` Argument to `brm`

```{r}
#| eval: false
gaussian; student; binomial; bernoulli; beta-binomial; poisson; 
negbinomial; geometric; Gamma; skew_normal; lognormal; 
shifted_lognormal; exgaussian; wiener; inverse.gaussian; exponential; 
weibull; frechet; Beta; dirichlet; von_mises; asym_laplace; 
gen_extreme_value; categorical; multinomial; cumulative; cratio; 
sratio; acat; hurdle_poisson; hurdle_negbinomial; hurdle_gamma; 
hurdle_lognormal; hurdle_cumulative; zero_inflated_binomial; 
zero_inflated_beta_binomial; zero_inflated_beta; 
zero_inflated_negbinomial; zero_inflated_poisson; 
zero_one_inflated_beta
```

. . .

In short, there are a lot of log-likelihood functions that you can use for Stan via brms

## The `prior` Argument to `brm` {.smaller}

```{r}
args(set_prior) # or usually just prior()
```

-   `prior` is a character string (in the Stan language) such as `"normal(0,5)"` but you can omit the quotation marks if you instead call `prior`, which calls `set_prior`
-   `class` indicates what parameters the call to `set_prior` pertains to
-   `coef` is the name of the parameter in question
-   `group` is the name of the grouping factor (if applicable)
-   `resp` is the name of the response variable in multivariate models
-   `dpar` is the name of the distribution parameter (if applicable)
-   `nlpar` is the name of the non-linear parameter (if applicable)
-   `lb` is the lower bound of the parameter (default $-\infty$)
-   `ub` is the upper bound of the parameter (default $\infty$)
-   `check` whether priors should be checked for validity

## The `get_prior` Function

-   Input the `formula`, `data`, and `family` and get back the possible prior choices (and defaults)

```{r}
source("macroeconomic_data.R") # Okun's Law
get_prior(GDO ~ x, data = data, family = gaussian)
```

-   You generally should not use `brm`'s defaults in GR5224 but you should look at what they are

## The `class` Argument to `set_prior`

-   Refers to a type of parameter in the model
-   Defaults to `"b"` which refers to (population-level) regression coefficients
-   Other possible values are `"Intercept"`, `"sd"`, `"cor"`, `"sigma"` and others we may talk about later

```{r}
my_prior <- prior(normal(-2, 1), class = "b") + 
  prior(normal(3, .5), class = "Intercept") +
  prior(exponential(0.5), class = "sigma")
```

## Okun's Law Revisited

```{r, Okun}
#| cache: true
#| results: hide
options(mc.cores = parallel::detectCores())
post <- brm(GDO ~ x, data = data, family = gaussian, prior = my_prior,
             save_pars = save_pars(all = TRUE)) # for moment_match
```

```{r}
post
```

## Using the `hypothesis` Function

-   To do this in rstanarm, you would have to call `as_tibble`

```{r}
args(brms:::hypothesis.brmsfit)
```

-   Here `x` is the object produced by `brm` and `hypothesis` is a string, typically with an embedded `<` or `>`, such as

```{r}
hypothesis(post, "x < 0")
```

## PSISLOOCV Diagnostics

```{r}
#| warning: false
loo_post <- loo(post, save_psis = TRUE)
# 201 invalidates the PSISLOOCV estimator of the ELPD
plot(loo_post, label_points = TRUE)
```

## Better Posterior Predictive Checking

```{r}
#| message: false
loo_post <- loo(post, save_psis = TRUE, moment_match = TRUE)
pp_check(post, type = "loo_intervals") # not called plotfun
```

## An Example of Good Calibration

```{r}
pp_check(post, type = "loo_pit_overlay")
```

## Other Post-Estimation Methods {.smaller}

Many of the things you can do with an object produced by `brm` are analogous to rstanarm

```{r}
#| echo: false
#| comment: ""
matrix(c(gsub("\\.brmsfit$", "", methods(class = "brmsfit"))), ncol = 4) |> 
  as_tibble() |> 
  print(n = 23)
```

